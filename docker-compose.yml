services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stackview-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-stackshare}
      POSTGRES_USER: ${POSTGRES_USER:-stackshare}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-stackshare123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - stackview-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-stackshare} -d ${POSTGRES_DB:-stackshare}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: src/StackShare.API/Dockerfile
    container_name: stackview-api
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__DefaultConnection: "Host=postgres;Database=${POSTGRES_DB:-stackshare};Username=${POSTGRES_USER:-stackshare};Password=${POSTGRES_PASSWORD:-stackshare123}"
      Logging__LogLevel__Default: ${LOG_LEVEL:-Information}
      Serilog__MinimumLevel: ${LOG_LEVEL:-Information}
      JwtSettings__SecretKey: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JwtSettings__Issuer: ${JWT_ISSUER:-StackShare}
      JwtSettings__Audience: ${JWT_AUDIENCE:-StackShare.Frontend}
      JwtSettings__ExpiryInMinutes: ${JWT_EXPIRY:-60}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_ENDPOINT:-http://jaeger:4317}
      OTEL_SERVICE_NAME: stackshare-api
    ports:
      - "5001:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - stackview-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MCP Server
  mcp:
    build:
      context: ./backend
      dockerfile: src/StackShare.McpServer/Dockerfile
    container_name: stackview-mcp
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      StackShareApiUrl: ${STACKSHARE_API_URL:-http://api:8080}
      ApiKey: ${MCP_API_KEY:-mcp-service-key-change-in-production}
      Logging__LogLevel__Default: ${LOG_LEVEL:-Information}
      Serilog__MinimumLevel: ${LOG_LEVEL:-Information}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_ENDPOINT:-http://jaeger:4317}
      OTEL_SERVICE_NAME: stackshare-mcp
    ports:
      - "5002:8081"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - stackview-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: stackview-frontend
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:5001/api}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - stackview-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Optional: Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: stackview-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"  # Jaeger UI
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
    networks:
      - stackview-network
    profiles:
      - observability

volumes:
  postgres_data:
    driver: local

networks:
  stackview-network:
    driver: bridge
    name: stackview-network