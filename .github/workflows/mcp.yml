name: MCP Server CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/src/StackShare.McpServer/**'
      - '.github/workflows/mcp.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/src/StackShare.McpServer/**'
      - '.github/workflows/mcp.yml'
  workflow_call:

env:
  DOTNET_VERSION: '8.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/stackshare-mcp

jobs:
  test:
    name: Test MCP Server
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-mcp-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      working-directory: ./backend
      run: dotnet restore src/StackShare.McpServer

    - name: Build MCP Server
      working-directory: ./backend
      run: dotnet build src/StackShare.McpServer --no-restore --configuration Release

    - name: Run MCP Server tests
      working-directory: ./backend
      run: |
        if [ -d "tests/StackShare.McpServer.Tests" ]; then
          dotnet test tests/StackShare.McpServer.Tests --no-build --configuration Release --verbosity normal
        else
          echo "No MCP-specific tests found - using general test coverage"
        fi

  build-and-push:
    name: Build and Push MCP Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push MCP image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/src/StackShare.McpServer/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  integration-test:
    name: MCP Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: stackshare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl netcat-openbsd

    - name: Pull MCP Docker image
      run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Start API service
      working-directory: ./backend
      run: |
        dotnet restore
        dotnet build
        # Start API in background
        nohup dotnet run --project src/StackShare.API > api.log 2>&1 &
        # Wait for API to start and be ready
        echo "Waiting for API to start..."
        for i in {1..30}; do
          if curl -f http://localhost:5095/api/health > /dev/null 2>&1; then
            echo "✅ API is ready"
            break
          fi
          echo "Waiting for API... attempt $i/30"
          sleep 2
        done
        # Verify API is actually running
        if ! curl -f http://localhost:5095/api/health > /dev/null 2>&1; then
          echo "❌ API failed to start"
          echo "=== API Logs ==="
          cat api.log
          exit 1
        fi
      env:
        ASPNETCORE_ENVIRONMENT: Testing
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=stackshare_test;Username=postgres;Password=postgres"

    - name: Start MCP Server with Docker
      run: |
        docker run -d --name mcp-server \
          --network host \
          -e StackShareApi__BaseUrl=http://localhost:5095/api \
          -e MCP_API_KEY=test-key \
          -e ASPNETCORE_ENVIRONMENT=Testing \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        sleep 15

    - name: Test MCP Server health
      run: |
        # Check if MCP server container is running
        if docker ps | grep -q mcp-server; then
          echo "✅ MCP Server container is running"
        else
          echo "❌ MCP Server container is not running"
          docker logs mcp-server
          exit 1
        fi
        
        # Check MCP server logs for startup indicators
        # Note: MCP Server is stdio-based and waits for input, so "iniciado com sucesso" may not appear
        if docker logs mcp-server 2>&1 | grep -q "Registrando ferramentas MCP"; then
          echo "✅ MCP Server registered tools successfully"
        elif docker logs mcp-server 2>&1 | grep -q "Iniciando StackShare MCP Server"; then
          echo "✅ MCP Server is starting up"
        else
          echo "❌ MCP Server startup logs not found"
          echo "=== MCP Server Logs ==="
          docker logs mcp-server
          exit 1
        fi
        
        # Test basic functionality by checking if API is accessible from container perspective
        echo "Testing API accessibility..."
        if curl -f http://localhost:5095/api/health > /dev/null 2>&1; then
          echo "✅ API is accessible for MCP Server integration"
        else
          echo "❌ API is not accessible for integration"
          exit 1
        fi

    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== API Logs ==="
        cat api.log || echo "No API logs found"
        echo ""
        echo "=== MCP Server Logs ==="
        docker logs mcp-server || echo "No MCP server logs found"

    - name: Cleanup
      if: always()
      run: |
        docker stop mcp-server || true
        docker rm mcp-server || true
        # Kill any remaining API process
        pkill -f "dotnet run --project src/StackShare.API" || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'