name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  workflow_call:

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/stackshare-frontend

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:unit

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 30

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint-and-test
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: stackshare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Verify PostgreSQL is ready
      run: |
        echo "🐘 Checking PostgreSQL connection..."
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432 -U postgres > /dev/null 2>&1; then
            echo "✅ PostgreSQL is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ PostgreSQL failed to become ready"
            exit 1
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 1
        done
        
        echo "📊 PostgreSQL status:"
        psql -h localhost -U postgres -d stackshare_test -c "SELECT version();" || echo "Failed to query PostgreSQL"
      env:
        PGPASSWORD: postgres
    
    - name: Install Playwright Browsers
      working-directory: ./frontend
      run: |
        echo "🎭 Installing Playwright browsers..."
        npx playwright install --with-deps
        echo "✅ Playwright browsers installed"
    
    - name: Restore backend dependencies
      working-directory: ./backend
      run: dotnet restore
    
    - name: Build backend
      working-directory: ./backend
      run: dotnet build --no-restore
    
    - name: Start backend services with detailed logging
      working-directory: ./backend
      run: |
        echo "🚀 Starting backend API..."
        echo "Environment: ASPNETCORE_ENVIRONMENT=Testing"
        echo "Database: stackshare_test on port 5432"
        
        # Start API in background with logging
        nohup dotnet run --project src/StackShare.API > ../api.log 2>&1 &
        API_PID=$!
        echo "📊 API started with PID: $API_PID"
        
        # Wait and check for API startup
        echo "⏳ Waiting for API to start (up to 60 seconds)..."
        for i in {1..60}; do
          echo "Attempt $i/60: Checking API health..."
          
          if curl -f -s http://localhost:5095/api/health > /dev/null 2>&1; then
            echo "✅ API is healthy and ready!"
            echo "📋 API logs (last 20 lines):"
            tail -20 ../api.log || echo "No logs available yet"
            break
          fi
          
          if [ $i -eq 60 ]; then
            echo "❌ API failed to start within 60 seconds"
            echo "📋 Full API logs:"
            cat ../api.log || echo "No logs found"
            echo "🔍 Checking if process is still running:"
            ps aux | grep dotnet | grep -v grep || echo "No dotnet processes found"
            echo "🔍 Checking port 5095:"
            netstat -tlnp | grep 5095 || echo "Port 5095 not in use"
            exit 1
          fi
          
          sleep 1
        done
        
        echo "🎯 Final API health check:"
        curl -v http://localhost:5095/api/health || true
      env:
        ASPNETCORE_ENVIRONMENT: Testing
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=stackshare_test;Username=postgres;Password=postgres"
    
    - name: Build frontend with logging
      working-directory: ./frontend
      run: |
        echo "🏗️ Building frontend..."
        npm run build
        echo "✅ Frontend build completed"
        echo "📂 Build output:"
        ls -la dist/ || echo "No dist folder found"
    
    - name: Start frontend with detailed monitoring
      working-directory: ./frontend
      run: |
        echo "🌐 Starting frontend preview server..."
        
        # Start preview in background with logging
        nohup npm run preview > ../frontend.log 2>&1 &
        FRONTEND_PID=$!
        echo "📊 Frontend started with PID: $FRONTEND_PID"
        
        # Wait and check for frontend startup
        echo "⏳ Waiting for frontend to start (up to 30 seconds)..."
        for i in {1..30}; do
          echo "Attempt $i/30: Checking frontend availability..."
          
          if curl -f -s http://localhost:4173 > /dev/null 2>&1; then
            echo "✅ Frontend is ready!"
            echo "📋 Frontend logs (last 10 lines):"
            tail -10 ../frontend.log || echo "No logs available yet"
            break
          fi
          
          if [ $i -eq 30 ]; then
            echo "❌ Frontend failed to start within 30 seconds"
            echo "📋 Full frontend logs:"
            cat ../frontend.log || echo "No logs found"
            echo "🔍 Checking if process is still running:"
            ps aux | grep "npm run preview" | grep -v grep || echo "No preview process found"
            echo "🔍 Checking port 4173:"
            netstat -tlnp | grep 4173 || echo "Port 4173 not in use"
            exit 1
          fi
          
          sleep 1
        done
        
        echo "🎯 Final frontend check:"
        curl -I http://localhost:4173 || true
    
    - name: Pre-test system diagnostics
      run: |
        echo "🔍 System diagnostics before running tests:"
        echo "Memory usage:"
        free -h
        echo "Disk usage:"
        df -h
        echo "Running processes:"
        ps aux | head -20
        echo "Network connections:"
        netstat -tlnp | grep -E "(4173|5095|5432)"
        echo "Environment variables:"
        env | grep -E "(CI|NODE_|ASPNETCORE_)" | sort
    
    - name: Run Playwright tests with detailed monitoring
      working-directory: ./frontend
      run: |
        echo "🎭 Starting Playwright E2E tests..."
        echo "Configuration check:"
        echo "- CI environment: $CI"
        echo "- Base URL will be: http://localhost:4173"
        echo "- Workers: 2 (CI mode)"
        echo "- Browsers: Chromium only (CI mode)"
        
        # Verify services are still running
        echo "🔍 Pre-test service verification:"
        if curl -f -s http://localhost:4173 > /dev/null; then
          echo "✅ Frontend is responsive"
        else
          echo "❌ Frontend is not responsive"
          curl -I http://localhost:4173 || true
        fi
        
        if curl -f -s http://localhost:5095/api/health > /dev/null; then
          echo "✅ Backend API is responsive"
        else
          echo "❌ Backend API is not responsive"
          curl -I http://localhost:5095/api/health || true
        fi
        
        # Run tests with timeout and progress reporting
        echo "🚀 Starting test execution..."
        timeout 600 npm run test:e2e || {
          EXIT_CODE=$?
          echo "❌ Tests failed or timed out (exit code: $EXIT_CODE)"
          
          echo "📋 Recent frontend logs:"
          tail -50 ../frontend.log || echo "No frontend logs"
          
          echo "📋 Recent API logs:"
          tail -50 ../api.log || echo "No API logs"
          
          echo "🔍 Current system state:"
          ps aux | grep -E "(dotnet|npm|node)" | grep -v grep || echo "No relevant processes"
          netstat -tlnp | grep -E "(4173|5095)" || echo "Services not listening"
          
          exit $EXIT_CODE
        }
        
        echo "✅ All E2E tests completed successfully!"
    
    - name: Collect logs and diagnostics on failure
      if: failure()
      run: |
        echo "📋 Collecting diagnostic information..."
        
        echo "=== FRONTEND LOGS ==="
        cat frontend.log 2>/dev/null || echo "No frontend logs found"
        
        echo "=== API LOGS ==="
        cat api.log 2>/dev/null || echo "No API logs found"
        
        echo "=== SYSTEM STATE ==="
        echo "Processes:"
        ps aux | grep -E "(dotnet|npm|node|playwright)" | grep -v grep || echo "No relevant processes"
        
        echo "Network:"
        netstat -tlnp | grep -E "(4173|5095|5432)" || echo "No services listening"
        
        echo "Memory:"
        free -h
        
        echo "Disk:"
        df -h
        
        echo "=== PLAYWRIGHT TEST RESULTS ==="
        ls -la frontend/test-results/ 2>/dev/null || echo "No test results found"
        
        # Try to get more info about what failed
        find frontend/test-results/ -name "*.txt" -exec echo "--- {} ---" \; -exec cat {} \; 2>/dev/null || true
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30
        
    - name: Upload test results and logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-logs-and-results
        path: |
          frontend/test-results/
          api.log
          frontend.log
        retention-days: 7

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, e2e-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Run Lighthouse CI
      working-directory: ./frontend
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}